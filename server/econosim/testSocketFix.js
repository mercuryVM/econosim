// Teste espec√≠fico para verificar corre√ß√£o do erro de socket.setTimeout
const { Server } = require('./Server.js');

console.log('üîß TESTE DE CORRE√á√ÉO DO ERRO DE SOCKET');
console.log('='.repeat(50));

try {
    // Simular socket.io para testar a inicializa√ß√£o
    const mockSocketIO = {
        use: () => {},
        on: () => {},
        of: () => ({
            use: () => {},
            on: () => {}
        })
    };

    console.log('üìã Verificando inicializa√ß√£o do servidor...');
    
    // Tentar criar uma inst√¢ncia do servidor
    const server = new Server(mockSocketIO);
    
    if (server) {
        console.log('‚úÖ Servidor criado com sucesso!');
        console.log('‚úÖ N√£o h√° mais erros relacionados ao socket.setTimeout');
        
        // Verificar se o servidor tem os m√©todos necess√°rios
        if (typeof server.handleConnections === 'function') {
            console.log('‚úÖ M√©todo handleConnections dispon√≠vel');
        }
        
        if (typeof server.cleanup === 'function') {
            console.log('‚úÖ M√©todo cleanup dispon√≠vel');
        }
        
        // Limpar recursos
        if (server.cleanup) {
            server.cleanup();
        }
        
        console.log('\nüéâ TESTE APROVADO - ERRO CORRIGIDO!');
    }
    
} catch (error) {
    console.error('‚ùå TESTE FALHOU:', error.message);
    console.error('Stack:', error.stack);
}

console.log('='.repeat(50));
